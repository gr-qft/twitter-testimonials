import {
  Box,
  BoxProps,
  chakra,
  Flex,
  Heading,
  Img,
  Stack,
  Text,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import Head from "next/head";
import { useEffect, useLayoutEffect, useRef, useState } from "react";
import { dataset, MediaItem, RawMedia } from "../lib/data";

const MotionBox = motion(Box);
const Video = chakra("video");
const MotionVideo = motion(Video);

const tweets = dataset.tweets.filter(
  (tweet) => !tweet.isReply && tweet.hasMedia && tweet.replies.length > 0
);

// interface MediaProps {
//   media: Media;
// }

const Media = ({ media, ...otherProps }: any) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [canPlay, setCanPlay] = useState(false);
  const [inView, setInView] = useState(false);

  useLayoutEffect(() => {
    if (canPlay && inView) {
      videoRef.current?.play();
    } else {
      videoRef.current?.pause();
    }
  }, [canPlay, inView]);

  if (media.type === "video") {
    return (
      <MotionVideo
        ref={videoRef}
        autoPlay
        muted
        loop
        onViewportEnter={() => {
          setInView(true);
        }}
        onViewportLeave={() => {
          setInView(false);
        }}
        onCanPlay={() => setCanPlay(true)}
        {...otherProps}
      >
        {media.sources.map((src: any) => (
          <source key={src.url} src={src.url} type={src.content_type} />
        ))}
      </MotionVideo>
    );
  } else {
    return <Img src={media.sources[0].url} {...otherProps} />;
  }
};

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box as="main">
        {tweets.map((tweet) => (
          <Box key={tweet.id}>
            <Flex flexDir="column" gap={16} mb="30vh">
              <Box pos="sticky" top={0} p={16} pb={0} bg="#fbfbfb" zIndex={1}>
                <Media
                  media={tweet.primaryMedia}
                  w="550px"
                  h="320px"
                  borderRadius="1.75rem"
                  objectFit="cover"
                  boxShadow={`0px 5.4px 5.3px rgba(0, 0, 0, 0.008),
                  0px 13px 12.6px rgba(0, 0, 0, 0.012),
                  0px 24.4px 23.8px rgba(0, 0, 0, 0.015),
                  0px 43.6px 42.4px rgba(0, 0, 0, 0.018),
                  0px 81.5px 79.4px rgba(0, 0, 0, 0.022),
                  0px 195px 190px rgba(0, 0, 0, 0.03)`}
                  border="7px solid #fbfbfb"
                  marginX="auto"
                />
              </Box>
              <Stack spacing={8} w="sm" marginX="auto">
                {tweet.replies.map((mention) => (
                  <Stack
                    key={mention.id}
                    spacing={1}
                    role="group"
                    pos="relative"
                    zIndex={0}
                    cursor="pointer"
                  >
                    <Box
                      pos="absolute"
                      inset="-2px -4px"
                      bgGradient="linear(to-l, pink.200, blue.200)"
                      borderRadius="2xl"
                      opacity={0}
                      zIndex={-1}
                      _groupHover={{
                        inset: "-8px -12px",
                        opacity: 0.25,
                      }}
                      transition="all 0.3s"
                    />
                    <Heading fontSize="md" fontWeight="bold">
                      {mention.author.name}
                    </Heading>
                    <Text fontSize="md" color="gray.600">
                      {mention.text}
                    </Text>
                  </Stack>
                ))}
              </Stack>
            </Flex>
          </Box>
        ))}
      </Box>
    </>
  );
}
